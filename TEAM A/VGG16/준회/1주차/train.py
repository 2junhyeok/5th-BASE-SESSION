# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cCga9LOP0LtsIk8h4O1xYSsGqY_PCkrU
"""

import torch
import torch.nn as nn
import torch.optim as optim
import torch.nn.functional as F
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms

import torchvision
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from torch.utils.data import DataLoader

"""# Model, Loss, Optimizer 선언"""

# device 설정
device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")

# VGG 클래스를 인스턴스화
model = VGG(base_dim = 64).to(device)

learning_rate = 0.001

# 손실함수 및 최적화함수 설정
loss_func = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr = learning_rate)

"""# Train 데이터셋 정의"""

# Transform 정의
transform = transforms.Compose(
    [transforms.ToTensor(),
     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])

batch_size = 4

# CIFAR10 Train 데이터 정의
trainset = datasets.CIFAR10(root = "./data", train = True, transform = transform, download = True)
train_loader = torch.utils.data.DataLoader(trainset, batch_size = batch_size, shuffle = True, num_workers = 2)

classes = ('plane', 'car', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck')

"""## Train"""

import matplotlib.pyplot as plt
import numpy as np
from tqdm import tqdm

# 코드 시작 전에 tqdm 객체 생성
pbar = tqdm(total=num_epoch)

loss_arr = []
for i in range(num_epoch):
    for j, [image, label] in enumerate(train_loader):
        x = image.to(device)
        y = label.to(device)

        optimizer.zero_grad()
        output = model.forward(x)
        loss = loss_func(output, y)
        loss.backward()
        optimizer.step()

    # 10번째 epoch마다 tqdm 업데이트
    if i % 5 == 0:
        pbar.update(10)
        print(loss)
        loss_arr.append(loss.cpu().detach().numpy())

# 코드 종료 후 tqdm 종료
pbar.close()
