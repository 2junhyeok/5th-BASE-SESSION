# -*- coding: utf-8 -*-
"""train.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SVsxvD6eAuDG1yfIWIrt-UTBuNWiJ7Ou
"""

# Commented out IPython magic to ensure Python compatibility.
import torch
import torch.nn as nn
import torch.optim as optim
import torch.nn.functional as F
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms

import torchvision
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from torch.utils.data import DataLoader
from torch.utils import data
import os

# display images
from torchvision import utils
import matplotlib.pyplot as plt
# %matplotlib inline

# utils
import numpy as np
from torchsummary import summary
import time
import copy

transform = transforms.Compose([
    transforms.Resize((32, 32)),
    transforms.ToTensor(),
    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5)),  # 이미지 정규화
])

train_dataset = datasets.SVHN(root='./data', split='train', download=True, transform=transform)

train_loader = DataLoader(dataset=train_dataset, batch_size=64, shuffle=True)

def train(model, device, train_loader, optimizer, epoch):
    model.train()  # 모델을 학습 모드로 설정
    for batch_idx, (data, target) in enumerate(train_loader):
        data, target = data.to(device), target.to(device)  # 데이터를 현재 디바이스로 이동
        optimizer.zero_grad()  # 이전 반복에서의 그래디언트를 초기화
        output = model(data)  # 모델에 데이터를 전달하여 결과를 계산 (순전파)
        loss = nn.CrossEntropyLoss()(output, target)  # 손실 함수를 계산
        loss.backward()  # 손실 함수를 기반으로 그래디언트를 계산 (역전파)
        optimizer.step()  # 계산된 그래디언트를 사용하여 모델의 가중치를 업데이트

        if batch_idx % 10 == 0:  # 10 배치마다 로그를 출력
            print(f'Train Epoch: {epoch} [{batch_idx * len(data)}/{len(train_loader.dataset)} ({100. * batch_idx / len(train_loader):.0f}%)]\tLoss: {loss.item():.6f}')

# device 설정
device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")

model = VGG(base_dim=64, num_classes=10).to(device)  # SVHN 10개의 classes
optimizer = optim.Adam(model.parameters(), lr=0.001)

epochs = 10
for epoch in range(1, epochs + 1):
    train(model, device, train_loader, optimizer, epoch)

import matplotlib.pyplot as plt
import numpy as np

# 이미지를 보여주기 위한 함수
def imshow(img):
    img = img / 2 + 0.5  # unnormalize
    npimg = img.numpy()
    plt.imshow(np.transpose(npimg, (1, 2, 0)))
    plt.show()

# 학습용 이미지를 무작위로 가져오기
dataiter = iter(train_loader)
images, labels = next(dataiter)

# 이미지 보여주기
imshow(torchvision.utils.make_grid(images))